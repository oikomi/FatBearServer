definitions:
  auth.BaseUser:
    properties:
      chat_room_id:
        type: string
      createdAt:
        description: 创建时间
        type: string
      dev_id:
        type: string
      email:
        type: string
      id:
        description: 主键ID
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
      token:
        type: integer
      updatedAt:
        description: 更新时间
        type: string
    type: object
  dev.AddSetReq:
    properties:
      duration:
        type: integer
      model_name:
        type: string
      token:
        type: integer
      vibration:
        type: string
    type: object
  dev.DevLoginReq:
    properties:
      dev_name:
        example: 设备名称
        format: string
        type: string
      model_name:
        example: 设备主播账号名称
        format: string
        type: string
      password:
        example: 设备密码
        format: string
        type: string
    type: object
  dev.DevSetting:
    properties:
      createdAt:
        description: 创建时间
        type: string
      duration:
        type: integer
      id:
        description: 主键ID
        type: integer
      model_name:
        type: string
      token:
        type: integer
      updatedAt:
        description: 更新时间
        type: string
      vibration:
        type: string
    type: object
  dev.Order:
    properties:
      createdAt:
        description: 创建时间
        type: string
      dev_name:
        type: string
      duration:
        type: integer
      id:
        description: 主键ID
        type: integer
      model_name:
        type: string
      send_user:
        type: string
      status:
        type: integer
      token:
        type: integer
      updatedAt:
        description: 更新时间
        type: string
      vibration:
        type: string
    type: object
  dev.OrderReq:
    properties:
      dev_name:
        example: 设备名称
        format: string
        type: string
      duration:
        example: 10
        format: int
        type: integer
      model_name:
        example: 主播账号名称
        format: string
        type: string
      send_user:
        example: 观众名称
        format: string
        type: string
      token:
        example: 50
        format: int
        type: integer
      vibration:
        example: 震动强度, 比如 Medium
        format: string
        type: string
    type: object
  room.CreateRoomReq:
    properties:
      creator:
        example: 房间创建者，就是主播账号名称
        format: string
        type: string
      name:
        example: 房间名称
        format: string
        type: string
    type: object
  room.Room:
    properties:
      createdAt:
        description: 创建时间
        type: string
      creator:
        example: 房间创建者，就是主播账号名称
        format: string
        type: string
      id:
        description: 主键ID
        type: integer
      room_name:
        example: 房间名称
        format: string
        type: string
      room_status:
        example: 0
        format: int
        type: integer
      updatedAt:
        description: 更新时间
        type: string
    type: object
  room.RoomMsg:
    properties:
      createdAt:
        description: 创建时间
        type: string
      id:
        description: 主键ID
        type: integer
      msg:
        type: string
      room_name:
        type: string
      send_user:
        type: string
      updatedAt:
        description: 更新时间
        type: string
    type: object
  room.SendRoomMsgReq:
    properties:
      msg:
        type: string
      name:
        type: string
      send_user:
        type: string
    type: object
  room.updateRoomStatusReq:
    properties:
      name:
        example: 房间名称
        format: string
        type: string
      status:
        example: 1
        format: int
        type: integer
    type: object
  user.AddTokenReq:
    properties:
      name:
        example: 充值的用户名称
        format: string
        type: string
      token:
        example: 1000
        format: int
        type: integer
    type: object
  user.LoginReq:
    properties:
      password:
        type: string
      role:
        type: string
      user_name:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /api/v1/dev/login:
    post:
      consumes:
      - application/json
      description: DevLogin
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: dev login
        in: body
        name: DevLoginReq
        required: true
        schema:
          $ref: '#/definitions/dev.DevLoginReq'
      produces:
      - application/json
      responses: {}
  /api/v1/dev/order:
    get:
      consumes:
      - application/json
      description: OrderList
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: model 名字
        in: query
        name: send_user
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dev.Order'
            type: array
    post:
      consumes:
      - application/json
      description: send Order
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: send order
        in: body
        name: OrderReq
        required: true
        schema:
          $ref: '#/definitions/dev.OrderReq'
      produces:
      - application/json
      responses: {}
  /api/v1/dev/set:
    get:
      consumes:
      - application/json
      description: set
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: model 名字
        in: query
        name: model_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dev.DevSetting'
            type: array
    post:
      consumes:
      - application/json
      description: add set
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: add set
        in: body
        name: AddSetReq
        required: true
        schema:
          $ref: '#/definitions/dev.AddSetReq'
      produces:
      - application/json
      responses: {}
  /api/v1/room/create:
    post:
      consumes:
      - application/json
      description: CreateRoom
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: create room
        in: body
        name: createRoom
        required: true
        schema:
          $ref: '#/definitions/room.CreateRoomReq'
      produces:
      - application/json
      responses: {}
  /api/v1/room/list:
    get:
      consumes:
      - application/json
      description: GetRoomList
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/room.Room'
            type: array
  /api/v1/room/msg:
    get:
      consumes:
      - application/json
      description: GetRoomMsg
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/room.RoomMsg'
            type: array
    post:
      consumes:
      - application/json
      description: GetRoomMsg
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: send room msg
        in: body
        name: SendRoomMsgReq
        required: true
        schema:
          $ref: '#/definitions/room.SendRoomMsgReq'
      produces:
      - application/json
      responses: {}
  /api/v1/room/updateRoomStatus:
    post:
      consumes:
      - application/json
      description: updateRoomStatus
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: updateRoomStatus
        in: body
        name: updateRoomStatus
        required: true
        schema:
          $ref: '#/definitions/room.updateRoomStatusReq'
      produces:
      - application/json
      responses: {}
  /api/v1/user/addToken:
    post:
      consumes:
      - application/json
      description: user add token
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: AddToken
        in: body
        name: AddTokenReq
        required: true
        schema:
          $ref: '#/definitions/user.AddTokenReq'
      produces:
      - application/json
      responses: {}
  /api/v1/user/getToken:
    get:
      consumes:
      - application/json
      description: user add token
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: 用户名称
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: integer
  /api/v1/user/info:
    get:
      consumes:
      - application/json
      description: get user info
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: 用户名称
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            $ref: '#/definitions/auth.BaseUser'
  /api/v1/user/login:
    post:
      consumes:
      - application/json
      description: user login
      parameters:
      - description: Authentication header
        in: header
        name: super_token
        type: string
      - description: user login
        in: body
        name: LoginReq
        required: true
        schema:
          $ref: '#/definitions/user.LoginReq'
      produces:
      - application/json
      responses: {}
  /health:
    get:
      consumes:
      - application/json
      description: HealthCheck
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: HealthCheck
swagger: "2.0"
